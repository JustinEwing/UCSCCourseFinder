(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> AND() takes exactly 3 arguments (2 given)"
p3
sS'layer'
p4
S'/Users/justin/Dropbox/183/UCSCCourseFinder/web2py/applications/coursefinder/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n\ncurrent_term = \'2016 Winter\'\nterm = [\'2016 Spring\', \'2016 Winter\', \'2016 Summer\', \'2016 Fall\'] \nstatus = [\'Open Classes\', \'All Classes\']\nsubject = [\'All Subjects\', \'Computer Engineering\', \'Computer Science\']\nunits = [\'All\', \'2\', \'5\']\n\n\ndef index():\n\tdefault_term = current_term\n\tdefault_stat = \'All Classes\'\n\tdefault_subject = \'All Subjects\'\n\tdefault_instructor = None\n\n\tform = SQLFORM.factory(\n\t\tField(\'term\', default=default_term, requires=IS_IN_SET(term)),\n\t\tField(\'status\', default=default_stat, requires=IS_IN_SET(status)),\n\t\tField(\'subject\', default=default_subject, requires=IS_IN_SET(subject)),\n\t\tField(\'course\', type=\'string\'),\n\t\tField(\'instructor\', type=\'string\', default=default_instructor),\n\t\tField(\'keyword\', type=\'string\'),\n\t\tformstyle=\'bootstrap3_stacked\',\n\t\tsubmit_button="Search")\n\t\t\n\tquery = None\n\tresults = None\n\n\tif form.process(keepvalues=True, onsuccess = None).accepted:\n\t\tsel_term = form.vars.term\n\t\tsel_status = form.vars.status\n\t\tsel_subject = form.vars.subject\n\t\tsel_course_num = form.vars.course.lower().split()\n\t\tsel_instructor = form.vars.instructor.lower().split()\n\t\tsel_keyword    = form.vars.keyword\n\t\tsel_kywrd_split = sel_keyword.lower().split()\n\n\t\tif sel_term:\t\n\t\t\tquery = db.search.term == sel_term\n\t\tif sel_status == \'All Classes\':\n\t\t\tquery &= True\n\t\telse:\n\t\t    query &= db.search.status == \'Open Class\'\n\t\tif sel_subject == \'All Subjects\':\n\t\t\tquery &= True\n\t\telse:\n\t\t\tif sel_subject == \'Computer Science\':\n\t\t\t\tquery &= db.search.course.contains(\'CMPS\')\n\t\t\telif sel_subject == \'Computer Engineering\':\n\t\t\t\tquery &= db.search.course.contains(\'CMPE\')\n\t\tif sel_course_num:\n\t\t\tquery &= reduce(lambda a, b: (a & b),\n\t\t\t\t(db.search.course.lower().contains(var) for var in sel_course_num))\n\t\tif sel_instructor:\n\t\t\tquery &= reduce(lambda a, b: (a | b),\n\t\t\t\t(db.search.instructor.lower().contains(var) for var in sel_instructor))\n\t\tif sel_keyword:\n\t\t\tquery &= reduce(lambda a, b: (a | b),\n\t\t\t\t(db.search.course.lower().contains(var) for var in sel_kywrd_split))\n\t\t\t#Possibly add search across more fields --issues with =& and =|\n\t\t\t#=& knocks out previous query, =| doesn\'t add enough refinement\n\t\t\t#query &= reduce(lambda a, b: (a | b),\n\t\t\t#\t(db.search.instructor.lower().contains(var) for var in sel_kywrd_split))\n\n\t\tresults = db(query).select()\n\n\n\treturn dict(form=form, results=results)\n\n\n#@auth.requires_login()\ndef save_course():\n\tcs_list = []\n\tnew_list = []\n\titem = db.search[request.vars.id]\n\n\tcs_list.append(item.id)\n\n\tif db(db.courses.user_id==auth.user_id).select().first() is None:\n\t\tprint \'record doesnt exist\'\n\t\tdb.courses.insert(user_id=auth.user_id, courses=cs_list)\n\telse:\n\t\tprint \'update god damnit\'\n\t\trow = db(db.courses.user_id==auth.user_id).select().first()\n\t\tnew_list = row.courses\n\t\tif item.id not in new_list:\n\t\t\tnew_list += cs_list\n\t\t\tprint new_list\n\t\t\tprint row\n\t\t\trow.update_record(courses=new_list)\n\n\treturn str(\'Saved\')\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\ndef profile():\n\tquery = None\n\trow = db(db.courses.user_id==auth.user_id).select().first()\n\n\tquery &= reduce(lambda a, b: (a & b),\n\t\t(db.search.course.contains(var) for var in row.courses))\n\n\tprint query\n\n\tresults = db(query).select()\n\n\treturn dict(form=auth.profile(), courses=results)\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(profile)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/justin/Dropbox/183/UCSCCourseFinder/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/justin/Dropbox/183/UCSCCourseFinder/web2py/applications/coursefinder/controllers/default.py", line 152, in <module>\n  File "/Users/justin/Dropbox/183/UCSCCourseFinder/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/justin/Dropbox/183/UCSCCourseFinder/web2py/applications/coursefinder/controllers/default.py", line 128, in profile\n    print query\n  File "/Users/justin/Dropbox/183/UCSCCourseFinder/web2py/gluon/packages/dal/pydal/objects.py", line 1745, in __str__\n    return str(self.db._adapter.expand(self))\n  File "/Users/justin/Dropbox/183/UCSCCourseFinder/web2py/gluon/packages/dal/pydal/adapters/base.py", line 954, in expand\n    rv = op(first, **optional_args)\nTypeError: AND() takes exactly 3 arguments (2 given)\n'
p11
s.